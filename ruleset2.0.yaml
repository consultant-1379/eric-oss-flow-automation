#
# COPYRIGHT Ericsson 2021
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: 2.0

description: "Ericsson Java Spring Boot Flow Automation in Idun"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-asciidoc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-asciidocbuilder:${env.ASCII_DOC_BUILDER_TAG}
  - adp-doc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:${env.DOC_BUILDER_TAG}
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:${env.HELM_DR_CHECK_TAG}
  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:${env.HELM_KUBECTL_TAG}
  - adp-image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:${env.IMAGE_DR_CHECK_TAG}
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java11mvnbuilder:${env.MVN_BUILDER_TAG}
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
  - elib-make-utilities: ${elib-make-subpath}-oss-drop/eric-elib/elib_makeutilities:${env.ELIB_MAKE_UTILITIES_TAG}
  - bth-linter: armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-bth/eric-bth-spectral-linter:${env.BTH_LINTER_TAG}
  - adp-mvn-dind-compose-builder: armdocker.rnd.ericsson.se/proj-eric-oss-dev-test/adp-mvn-dind-compose-builder:1.0.0-stable
  - adp-oas-coverage-report-swagger-tool: armdocker.rnd.ericsson.se/proj-eric-oss-dev-test/adp-oas-coverage-report-swagger-tool:1.0.0-stable
  - grype-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype:${env.ANCHORE_TAG}
  - trivy-inline-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan:${env.TRIVY_TAG}
  - va-scan-kubesec: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubesec:${env.KUBESEC_TAG}
  - va-scan-kubeaudit: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubeaudit:${env.KUBEAUDIT_TAG}
  - va-scan-kubehunter: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubehunter:${env.KUBEHUNTER_TAG}
  - hadolint-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/hadolint-scan:${env.HADOLINT_TAG}
  - sdk-validator: armdocker.rnd.ericsson.se/proj-eric-oss-sdkschema-drop/eric-oss-sdkschema-validator:latest

import:
  common: common-properties.yaml

# List of constants
properties:
  - elib-make-subpath: armdocker.rnd.ericsson.se/proj-eric
  - project-subpath: proj-eric-oss
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-secret: armdocker
  - image-dev-repopath: ${image-registry-path}-dev
  - image-ci-repopath: ${image-registry-path}-ci-internal
  - image-drop-repopath: ${image-registry-path}-drop
  - image-ci-full-name:  ${image-drop-repopath}/${common.docker-image-name}
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}
  - image-full-name-db: ${image-drop-repopath}/${common.docker-db-image-name}
  - image-full-name-bragent: ${image-drop-repopath}/${common.docker-bragent-image-name}
  - war-file-fa-ui: https://armdocker.rnd.ericsson.se/artifactory/docker-v2-global-local/proj-eric-oss-drop/eric-oss-flow-automation-ui/fa-ui-latest/eric-oss-flow-automation-ui.war
  - generic-drop-repo: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-drop-generic
  - structure-data-file: eric-oss-flow-automation-structured-data.json

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-dev-repopath: ${helm-chart-repo-server-path}-dev-helm
  - helm-chart-ci-repopath: ${helm-chart-repo-server-path}-ci-internal-helm
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm

  # Generic repository for publishing artifacts such as documentation
  - generic-drop-repo: ${helm-chart-repo-server-path}-drop-generic

  # Functional ID for your Team or CI group to push to Gerrit repo
  - git-user: ossadmin
  - git-repo-path: OSS/com.ericsson.oss.ae/eric-oss-flow-automation
  - git-repo-url: https://gerrit.ericsson.se/${git-repo-path}.git
  - ssh-git-repo-url: ssh://gerrit.ericsson.se:29418/${git-repo-path}
  - git-repo: https://gerrit.ericsson.se/#/admin/projects/${git-repo-path}

  - enabled-helm-design-rules: "-DhelmDesignRule.config.drHc011=enable -DhelmDesignRule.config.DR-D1120-045-AD=enable"

  # FOSSA
  - fossa-server-endpoint: https://scasfossa.internal.ericsson.com
  - fossa-ci-repopath: ${helm-chart-repo-server-path}-dev-generic-local/fossa
  - fossa-service-name: eric-oss-flow-automation
  - fossa-scan-report-artifact-path: ${fossa-ci-repopath}/${fossa-service-name}
  - fossa-scan-artifact-file-name: ${fossa-service-name}-${var.commithash}.tgz
  - fossa-project-name: OSS/com.ericsson.oss.ae/eric-oss-flow-automation
  - fossa-report-name: fossa-report.json
  - dependency-file-name: plms/dependencies.yaml
  - fossa-team-name: eric-oss-indigo
  - fossa-config-location: ${env.PWD}/.fossa.yml
  - docker-params: "--workdir ${env.PWD}"

  # Doc
  - dir-doc-build-output: ${env.PWD}/build/doc
  - dir-doc-marketplace: ${env.PWD}/doc/marketplace

  # VA IMAGES
  - image-to-scan: ${var.image-full-name-internal}:${var.build-version}
  - anchore-grype-image: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype:latest
  - trivy-image: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan:latest

  # SDK publish resources Paths
  - example-flows-publish-repo-base-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-release-local/com/ericsson/oss/ae/example-flows
  - example-flows-project-zips-publish-repo-path: ${example-flows-publish-repo-base-path}/${var.build-version}/flow-project-zips
  - example-flows-flow-zips-publish-repo-path: ${example-flows-publish-repo-base-path}/${var.build-version}/flow-zips
  - example-flows-project-zips-local-path: flowautomation-service-sdk/example-flows/target/generated-zips/example-flow-projects
  - example-flows-flow-zips-local-path: flowautomation-service-sdk/example-flows/target/generated-zips/example-flows

  # Archetype values
  - archetype-flow-name: "Hello World"
  - archetype-flow-description: "Flow archetype project generated in the pipeline"
  - archetype-artifact-id: "flowautomation-test"

# import environment variables (For example: Jenkins parameters)
env:
  - HOME
  - MAVEN_CLI_OPTS (default=-Duser.home=${env.HOME} -B)
  - MAVEN_OPTS (default=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn)
  - PWD
  - RELEASE (default=false)
  - DOCKER_VOLUME_MAPPING_PASSWD (default=--volume ${env.HOME}/mypasswd:/etc/passwd:ro)
  - POSTGRES_RANDOM_PORT
  - REST_RANDOM_PORT
  - JACOCO_RANDOM_PORT
  - DOCKER_NETWORK (default=--network host)

  # Kubernetes
  - COLLECT_LOGS_SCRIPT_LOCATION (default="https://arm.sero.gic.ericsson.se/artifactory/proj-ADP_GS_Support_FTP-generic-local/collect_ADP_logs")
  - COLLECT_LOGS_SCRIPT_FILE_NAME (default="collect_ADP_logs.sh")
  - COLLECT_LOGS_SINCE_RELATIVE_TIME (default="2h")
  - COLLECT_LOGS_DIR (default=./k8s-logs)
  - ENABLE_HELM_V3 (default=true)
  - HELM_INSTALL_TIMEOUT (default=15m0s)
  - HELM_RELEASE (default=${common.helm-chart-name}-release)
  - HELM_TEST_TIMEOUT (default=5m0s)
  - HELM_VERSION_IN_IMAGE (default="3.9.3")
  - K8S_NAMESPACE (default=${common.helm-chart-name}-${var.commithash})
  - KUBECONFIG (default=${env.HOME}/.kube/config)
  - BUILD_DIR (default=./build)
  - KAAS_INFO_FILE (default=${env.BUILD_DIR}/kaas-info.log)

  # CI Internal DB Postgres
  - POSTGRES_HELM_RELEASE_NAME (default="ci-internal-postgres")
  - POSTGRES_HELM_CHART (default="./ci/charts/ci-internal-database-pg/")

  # Credentials
  - ERIDOC_USERNAME
  - ERIDOC_PASSWORD
  - GERRIT_USERNAME
  - GERRIT_PASSWORD
  - GERRIT_CHANGE_NUMBER (default="master")
  - JIRA_USERNAME
  - JIRA_PASSWORD
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS
  - MARKETPLACE_ACCESS_TOKEN

  # Default docker image tags
  - ASCII_DOC_BUILDER_TAG (default=latest)
  - DOC_BUILDER_TAG (default=2.3.0-latest)
  - ELIB_MAKE_UTILITIES_TAG (default=latest)
  - HELM_DR_CHECK_TAG (default=latest)
  - HELM_KUBECTL_TAG (default=latest)
  - IMAGE_DR_CHECK_TAG (default=latest)
  - MVN_BUILDER_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - BTH_LINTER_TAG (default=latest)

  # VA Tools docker image tags
  - ANCHORE_TAG (default=latest)
  - TRIVY_TAG (default=latest)
  - KUBESEC_TAG (default=latest)
  - KUBEAUDIT_TAG (default=latest)
  - KUBEHUNTER_TAG (default=latest)
  - HADOLINT_TAG (default=latest)

  # SonarQube
  - SONAR_AUTH_TOKEN
  - SONAR_HOST_URL
  - SONAR_BRANCH (default="master")

  # REST2HTML - Document Number of the REST Container file (The decimal class for a container is 190 89-)
  - REST2HTML_NUM (default="190 89-CAAH 101 091/1")

  # BTH Linter
  - OPEN_API_SPEC_DIRECTORY (default=flowautomation-service-rest-api/src/main/resources/v1)

  # FOSSA
  - FOSSA_ARTIFACT_HASH
  - FOSSA_API_KEY

  #BAZAAR
  - BAZAAR_USER (default=ossadmin)
  - BAZAAR_TOKEN

  # X-RAY
  - XRAY_USER
  - XRAY_APIKEY

  # VHUB
  - VHUB_API_TOKEN

# Variables, set by below tasks
var:
  - docker-config-basepath
  - commithash
  - commithash-full
  - commit-author
  - commit-email
  - image-registry
  - helm-chart-repo-internal
  - image-full-name-internal
  - image-full-name-internal-db
  - image-full-name-internal-bragent
  - image-repopath-internal
  - image-repopath-drop
  - rest2html-optional
  - revision
  - rstate
  - image-dr-vm-args
  - kaas-version
  - kaas-current-context
  - port-rest
  - port-postgres
  - port-jacoco
  - docker-image-target
  - k8s-namespace
  - resultcode_hadolint_check
# Versioning
  - version-prefix # ex: 1.0.0
  - release-version # ex: 1.0.0+2
  - build-version # ex: 1.0.0-2
  - pom-version #ex: 1.0.0-SNAPSHOT

# Rules to execute
rules:

  # Integrated rule to execute everything locally (init-dev)
  release:
    - rule: clean
    - rule: init-dev
    - rule: lint
    - rule: build
    - rule: test
    - rule: image
    - rule: image-dr-check
    - rule: package
    - rule: publish-jars
    - rule: k8s-test

  #Genereate, validate and upload structure-data.json file
  structure-data:
    - rule: structure-data-generate
    - rule: structure-data-validate
    - rule: structure-data-upload

  # Clean workspace
  clean:
    - task: rm
      cmd:
        - rm -rf .bob/
        - rm -rf build/
        - rm -rf k8s-logs/
        - rm -f artifact.properties
        - rm -f rest2html*.zip
        - rm -f rest_conversion_log.txt
        - rm -f flowautomation-service-rest-api/src/main/resources/v1/*.zip
        - rm -f helm-install-dry-run.log
        - rm -rf *${fossa-report-name}
    - task: mvn-clean
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean

  # Common tasks for all init rules
  init-common:
    - task: version
      docker-image: adp-release-auto
      docker-flags:
        - "--env RELEASE"
      cmd: generate-version --is-release ${env.RELEASE} --output build-version
    - task: generate-version-prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: pom-version
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} help:evaluate -Dexpression=project.version -q -DforceStdout > .bob/var.pom-version
    - task: rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.build-version} > .bob/var.rstate
    - task: commit
      docker-image: adp-release-auto
      cmd:
        - git rev-parse --short HEAD > .bob/var.commithash
        - git rev-parse HEAD > .bob/var.commithash-full
        - git log -1 --format='%aN' > .bob/var.commit-author
        - git log -1 --format='%aE' > .bob/var.commit-email
    - task: create-temp-dir
      cmd: mkdir -p ${env.BUILD_DIR}
    - task: generate-rest-port
      cmd:
        - echo $(((RANDOM%99)+8000)) > .bob/var.port-rest
        - PORT_REST=${var.port-rest}
    - task: generate-postgres-port
      cmd:
        - echo $(((RANDOM%50)+5400)) > .bob/var.port-postgres
        - POSTGRES_RANDOM_PORT=${var.port-postgres}
    - task: generate-jacoco-port
      cmd:
        - echo $(((RANDOM%99)+6300)) > .bob/var.port-jacoco
        - JACOCO_RANDOM_PORT=${var.port-jacoco}
    - task: docker-compose-random-ports
      cmd: echo -e "PORT1=$(((RANDOM%99)+9900))\nPORT2=$(((RANDOM%50)+9900))\nPORT3=$(((RANDOM%99)+9000))\nREST_RANDOM_PORT=${var.port-rest}\nPORT5=$(((RANDOM%99)+8700))\nPORT6=$(((RANDOM%99)+4400))\nJACOCO_RANDOM_PORT=${var.port-jacoco}\nPOSTGRES_RANDOM_PORT=${var.port-postgres}" > .bob/var.docker-compose-variables-config
    - task: export-ports
      cmd:
        - export POSTGRES_RANDOM_PORT=${var.port-postgres}
        - export REST_RANDOM_PORT=${var.port-rest}
        - export JACOCO_RANDOM_PORT=${var.port-jacoco}
    - task: k8s-namespace
      cmd: echo ${env.K8S_NAMESPACE} > .bob/var.k8s-namespace


  # Dev Tasks: only used by manually publishing development/black builds by developers
  init-dev:
    - rule: init-common
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=${var.rstate} && echo P${RSTATE:2}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-dev-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-dev-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-dev-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: image-full-name-internal-db
      cmd: echo "${image-dev-repopath}/${common.docker-db-image-name}" > .bob/var.image-full-name-internal-db
    - task: image-full-name-internal-bragent
      cmd: echo "${image-dev-repopath}/${common.docker-bragent-image-name}" > .bob/var.image-full-name-internal-bragent
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-dev-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo " -DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable" > .bob/var.image-dr-vm-args
    - task: docker-compose-version
      cmd: echo -e "CONTAINERVAR=-${var.build-version}\nBOBTAGVERSION=:${var.build-version}\nBOBDOCKERRUN=${image-dev-repopath}/" >> .bob/var.docker-compose-variables-config
    - task: docker-image-target-test
      cmd: echo -e "test" >> .bob/var.docker-image-target

  # CI-Internal Tasks: used by CI to use as temporary storage for testing, only CI user has write access.
  init-precodereview:
    - rule: init-common
    - task: update-pom-version
      cmd: sh -c 'find ./ -name 'pom.xml' -type f -exec sed -i -e "s/${var.pom-version}/${var.build-version}/" {} \; '
    - task: update-example-flow-pom-template-version
      cmd: sh -c 'find ./ -name 'generatedProject-root-pom.xml' -type f -exec sed -i -e "s/${var.pom-version}/${var.build-version}/" {} \; '
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=${var.rstate} && echo P${RSTATE:2}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: image-full-name-internal-db
      cmd: echo "${image-ci-repopath}/${common.docker-db-image-name}" > .bob/var.image-full-name-internal-db
    - task: image-full-name-internal-bragent
      cmd: echo "${image-ci-repopath}/${common.docker-bragent-image-name}" > .bob/var.image-full-name-internal-bragent
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo " -DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable" > .bob/var.image-dr-vm-args
    - task: docker-compose-version
      cmd: echo -e "CONTAINERVAR=-${var.build-version}\nBOBTAGVERSION=:${var.build-version}\nBOBDOCKERRUN=${image-ci-repopath}/" >> .bob/var.docker-compose-variables-config
    - task: docker-image-target-test
      cmd: echo -e "test" >> .bob/var.docker-image-target

  # Drop level tasks: used by CI to publish artifacts after successful CI pipeline execution for a drop build
  init-drop:
    - rule: init-common
    - task: update-pom-version
      cmd: sh -c 'find ./ -name 'pom.xml' -type f -exec sed -i -e "s/${var.pom-version}/${var.build-version}/" {} \; '
    - task: update-example-flow-pom-template-version
      cmd: sh -c 'find ./ -name 'generatedProject-root-pom.xml' -type f -exec sed -i -e "s/${var.pom-version}/${var.build-version}/" {} \; '
    - task: generate-release-version
      cmd: echo ${var.build-version} | sed s/-/+/ > .bob/var.release-version
    - task: full-revision # For example: A (Note: The Letters I O P Q R W must never be used for Document Revisioning.
      cmd:
        - RSTATE=${var.rstate} && echo ${RSTATE:2} > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-repopath-drop
      cmd: echo "${image-drop-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-drop
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: image-full-name-internal-db
      cmd: echo "${image-ci-repopath}/${common.docker-db-image-name}" > .bob/var.image-full-name-internal-db
    - task: image-full-name-internal-bragent
      cmd: echo "${image-ci-repopath}/${common.docker-bragent-image-name}" > .bob/var.image-full-name-internal-bragent
    - task: docker-compose-version
      cmd: echo -e "CONTAINERVAR=-${var.build-version}\nBOBTAGVERSION=-dev:${var.build-version}\nBOBDOCKERRUN=${image-ci-repopath}/" >> .bob/var.docker-compose-variables-config
    - task: docker-image-target-base
      cmd: echo -e "base" >> .bob/var.docker-image-target
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: adp-artifacts-properties
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts
        --chart-name ${common.helm-chart-name}
        --chart-version ${var.release-version}
        --chart-repo ${helm-chart-drop-repo}
        --image-name ${common.docker-image-name}
        --image-version ${var.build-version}
        --image-repo "${var.image-registry}/${var.image-repopath-drop}"
    - task: write-git-details
      cmd:
        - echo "GIT_TAG=$(git log -1 --pretty=format:'%h')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR_EMAIL=$(git log -1 --format='%ae')" >> artifact.properties
        - echo "GIT_COMMIT_SUMMARY=$(git log -1 --pretty=format:'%s')" >> artifact.properties
    - task: image-dr-vm-args
      cmd: echo "" > .bob/var.image-dr-vm-args

  lint:
    - task: markdownlint
      docker-image: adp-doc-builder
      cmd: bash -c 'markdownlint --config /etc/markdownlint-cli/adp.yaml $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: vale
      docker-image: adp-doc-builder
      cmd: bash -c 'vale --output line --no-wrap $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: helm
      docker-image: adp-helm-dr-check
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm3 lint charts/${common.helm-chart-name}
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: helm-dr-check --helm-chart charts/${common.helm-chart-name} ${enabled-helm-design-rules} --helm-v3 --output .bob/
    - task: license-check
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} license:check -DskipTests=true
    - task: checkstyle
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} checkstyle:check -DskipTests=true
    - task: oas-bth-linter
      docker-image: bth-linter
      docker-flags:
        - "--env OPEN_API_SPEC_DIRECTORY=${env.OPEN_API_SPEC_DIRECTORY}"
        - "--env OUTPUT_DIRECTORY=.bob"
      cmd: /bth-linter.sh
    - task: metrics-check
      cmd:
        - . ./ci/scripts/metrics-checker.sh --chmod=+x && checkValuesYAML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkServiceYAML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkDeploymentYAML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkHelperTPL ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkPomXML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkCoreApplicationJAVA ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && passOrFailCheck
  generate:
    - rule: generate-adp-docs
    - rule: rest-2-html

  validate-sdk:
  - task: check-sdk
    docker-image: sdk-validator
    cmd: validate-sdk --proj-sdk-dir ${env.PWD}/sdk-docs

  # Generate HTML output files from OpenAPI spec
  rest-2-html:
    - task: check-has-open-api-been-modified
      cmd:
        - if [ -z "$(git diff --name-status HEAD~ | grep flowautomation-service-rest-api/src/main/resources/v1/eric-oss-flow-automation-openapi.yaml)" ]; then
            echo "NO modifications have been made to the OpenAPI spec.";
            echo false > .bob/var.has-openapi-spec-been-modified;
          else
            echo "MODIFIED IT WAS TRUE BEFORE There HAS been modifications made to the OpenAPI spec.";
            echo true > .bob/var.has-openapi-spec-been-modified;
          fi

  # Generate documents: cpi sdifs and raml hml doc
  generate-docs:
    - task: asciidoc-to-sdif
      docker-image: adp-asciidoc-builder
      cmd: /adp_build_doc.sh --project-dir=${env.PWD} --build-dir=${env.PWD}/build
    - task: prepare-for-marketplace
      docker-image: adp-release-auto
      cmd:
        bash -c 'for i in $(find ./build/doc -maxdepth 1 ! -path ./build/doc -type d);
        do
        package_html.py -i $i/html -o $i/$(basename $i)_HTML.zip;
        done'

  generate-adp-docs:
##### Commented because the lint is failing every md file - Need to revisit ##########
#    - task: lint
#      docker-image: adp-doc-builder
#      cmd:
#        - /bin/bash -c
#          'for i in `find ${dir-doc-marketplace} -name "*.md"`; do
#          markdownlint --config ${dir-doc-marketplace}/markdownlint.json $i;
#          done'
    - task: md-to-html
      docker-image: adp-release-auto
      cmd:
        - 'doc-handler generate --config ${dir-doc-marketplace}/adp_docs_config.yaml
                                 --output ${dir-doc-build-output}/html
                                 --format html
                                 --zip'
        - mv ${dir-doc-build-output}/html/*.zip ${dir-doc-build-output}
    - task: generate-svl-replacement-md
      docker-image: adp-release-auto
      cmd:
      - doc-handler generate-svl-replacement --product-number ${common.service-product-number} --product-version 1.0.0 --output ${dir-doc-build-output}/Software_Vendor_List --format html --zip
      - mv ${dir-doc-build-output}/Software_Vendor_List/*.zip ${dir-doc-build-output}/Software_Vendor_List.zip


  doc-marketplace-upload-dev:
    - task: upload-doc-to-arm
      docker-image: adp-release-auto
      cmd: marketplace upload
        --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url ${helm-chart-dev-repopath}/eric-oss-flow-automation/marketplace/dev
        --config  ${dir-doc-marketplace}/adp_upload_config.yaml
        --dev
    - rule: refresh-adp-portal-marketplace

  doc-marketplace-upload-release:
    - task: upload-doc-to-arm
      docker-image: adp-release-auto
      cmd: marketplace upload
        --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url ${helm-chart-dev-repopath}/eric-oss-flow-automation/marketplace/release
        --config ${env.PWD}/doc/marketplace/adp_upload_config.yaml
        --version ${var.version-prefix}
    - rule: refresh-adp-portal-marketplace

  refresh-adp-portal-marketplace:
    - task: refresh-adp-portal-marketplace-task
      docker-image: adp-release-auto
      cmd: marketplace refresh --portal-token ${env.MARKETPLACE_ACCESS_TOKEN}

  # Build java source code and package jar file, no need image building at this stage
  build:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags-with-creds
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean install -DskipTests=true

  oas-coverage-report:
    #    - task: docker-build-oas-coverage-image
    #      cmd: docker build -t armdocker.rnd.ericsson.se/proj-eric-oss-dev-test/adp-oas-coverage-report-swagger-tool:1.0.0-stable -f flowautomation-service-jboss/src/main/resources/docker-oas-swagger-tool/Dockerfile .
    #    - task: docekr-oas-image-push-internal
    #      cmd: docker push armdocker.rnd.ericsson.se/proj-eric-oss-dev-test/adp-oas-coverage-report-swagger-tool:1.0.0-stable
    - task: copy-generated-files-into-one-folder
      cmd:
        - mkdir -p flowautomation-service-coverage/src/test/resources/swagger-coverage-output
        - cp flowautomation-service-integration-jee/swagger-coverage-output/*-coverage.json flowautomation-service-coverage/src/test/resources/swagger-coverage-output/
        - cp flowautomation-service-interface-tests-rest/swagger-coverage-output/*-coverage.json flowautomation-service-coverage/src/test/resources/swagger-coverage-output/
    - task: generate-report
      docker-image: adp-oas-coverage-report-swagger-tool
      docker-flags: &mvn-docker-oas-report-flags-with-creds
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
      cmd:
        - swagger-coverage-commandline -s flowautomation-service-rest-api/src/main/resources/v1/eric-oss-flow-automation-openapi.yaml -i flowautomation-service-coverage/src/test/resources/swagger-coverage-output/ -c flowautomation-service-jboss/src/main/resources/docker-oas-swagger-tool/swagger-tool-rules.json
    - task: copy-generated-html-report-to-adp-doc
      cmd:
        - mkdir -p build/doc/Swagger_Coverage_Output/
        - cp swagger-coverage-report.* build/doc/Swagger_Coverage_Output/

  docker-compose:
#    The following commented lines can be uncommented if the adp-mvn-dind-compose-builder:1.0.0-stable image is deleted from the artifactory
#    - task: image-build-internal
#      cmd: docker build -t armdocker.rnd.ericsson.se/proj-eric-oss-dev-test/adp-mvn-dind-compose-builder:1.0.0-stable -f flowautomation-service-jboss/src/main/resources/docker/Dockerfile .
#    - task: image-push-internal
#      cmd: docker push armdocker.rnd.ericsson.se/proj-eric-oss-dev-test/adp-mvn-dind-compose-builder:1.0.0-stable
    - task: docker-compose-config
      docker-image: adp-mvn-dind-compose-builder
      docker-flags: &mvn-docker-compose-flags-with-creds
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "-v /var/run/docker.sock:/var/run/docker.sock"
        - "--group-add $(stat -c '%g' /var/run/docker.sock)"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
        - "--env REST_RANDOM_PORT=${var.port-rest}"
        - "--env JACOCO_RANDOM_PORT=${var.port-jacoco}"
      cmd: docker-compose --env-file .bob/var.docker-compose-variables-config -f docker-compose-bob.yml config
    - task: docker-compose-up
      docker-image: adp-mvn-dind-compose-builder
      docker-flags: *mvn-docker-compose-flags-with-creds
      cmd: docker-compose --env-file .bob/var.docker-compose-variables-config -f docker-compose-bob.yml up -d
    - task: docker-compose-down
      docker-image: adp-mvn-dind-compose-builder
      docker-flags: *mvn-docker-compose-flags-with-creds
      cmd: docker-compose --env-file .bob/var.docker-compose-variables-config -f docker-compose-bob.yml down -v

  docker-compose-sdk:
    - task: docker-compose-up-fdre
      docker-image: adp-mvn-dind-compose-builder
      docker-flags: *mvn-docker-compose-flags-with-creds
      cmd: docker-compose -f flowautomation-service-sdk/src/main/resources/fdre/docker-compose.yml up -d
    - task: image-tag-internal-fa-latest
      cmd: docker tag ${var.image-full-name-internal}:${var.build-version} armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-oss-flow-automation:latest
    - task: image-tag-internal-fa-db-latest
      cmd: docker tag ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:${var.build-version} armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-oss-flow-automation-db:latest
    - task: get-flows-fdre
      docker-image: adp-maven-builder
      docker-flags: &mvn-test-flags-with-creds
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "-v /var/run/docker.sock:/var/run/docker.sock"
        - "--group-add $(stat -c '%g' /var/run/docker.sock)"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
      cmd: mvn ${env.MAVEN_CLI_OPTS} test -Pdocker-compose-bob -Dtest="RestDslHelloWorldTest#checkFlowDefinition" -pl flowautomation-service-integration-jee
    - task: docker-compose-down-fdre
      docker-image: adp-mvn-dind-compose-builder
      docker-flags: *mvn-docker-compose-flags-with-creds
      cmd: docker-compose -f flowautomation-service-sdk/src/main/resources/fdre/docker-compose.yml down -v
    - task: docker-compose-ps-check
      docker-image: adp-mvn-dind-compose-builder
      docker-flags: *mvn-docker-compose-flags-with-creds
      cmd: docker-compose -f flowautomation-service-sdk/src/main/resources/fdre/docker-compose.yml ps

  example-flows:
    - task: test-flow-zip
      docker-image: adp-release-auto
      docker-flags: *mvn-docker-compose-flags-with-creds
      cmd:
        - 'curl -i -X POST http://localhost:${var.port-rest}/flow-automation/v1/flows/ --form flow-package=@${example-flows-flow-zips-local-path}/simpleCalculatorFlow-1.0.0.zip --header "UserID: faadmin"'
        - 'curl -i -X GET http://localhost:${var.port-rest}/flow-automation/v1/flows/ --header "UserID: faadmin" | grep "com.ericsson.oss.ae.fa.flows.example.simpleCalculatorFlow"'
    - task: upload-flow-zips
      docker-image: adp-release-auto
      #     Add curl command for each flow zip to be uploaded
      cmd:
        - curl -u '${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS}' -sS -X PUT ${example-flows-flow-zips-publish-repo-path}/simpleCalculatorFlow-1.0.0.zip -T ${example-flows-flow-zips-local-path}/simpleCalculatorFlow-1.0.0.zip
        - curl -u '${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS}' -sS -X PUT ${example-flows-flow-zips-publish-repo-path}/myFirstFlow-1.0.0.zip -T ${example-flows-flow-zips-local-path}/myFirstFlow-1.0.0.zip
    - task: test-flow-project-zip
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags-example-flows
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
      cmd:
        - unzip -o ${example-flows-project-zips-local-path}/myFirstFlow-1.0.0-project.zip
        - mvn ${env.MAVEN_CLI_OPTS} clean install -f myFirstFlow/pom.xml
        - rm -rf myFirstFlow
    - task: upload-flow-project-zips
      docker-image: adp-release-auto
      #     Add curl command for each flow project zip to be uploaded
      cmd:
        - curl -u '${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS}' -sS -X PUT ${example-flows-project-zips-publish-repo-path}/simpleCalculatorFlow-1.0.0-project.zip -T ${example-flows-project-zips-local-path}/simpleCalculatorFlow-1.0.0-project.zip
        - curl -u '${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS}' -sS -X PUT ${example-flows-project-zips-publish-repo-path}/myFirstFlow-1.0.0-project.zip -T ${example-flows-project-zips-local-path}/myFirstFlow-1.0.0-project.zip

    # Run the JSE, Integration and Interface Tests
  test:
    - task: run-all-tests
      docker-image: adp-mvn-dind-compose-builder
      docker-flags: *mvn-docker-compose-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} install -Pdocker-compose-bob

  sonar-enterprise-pcr:
    - task: mvn-sonar-enterprise-sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.branch.name=${var.version-prefix}-${env.GERRIT_CHANGE_NUMBER}
        -Dsonar.branch.target=${env.SONAR_BRANCH}

  sonar-enterprise-release:
    - task: sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.projectVersion=${var.build-version}

  # Build a docker image pointing to dirty repository
  image:
    - task: docker-jboss-build
      cmd: docker build ${env.PWD}
        --file Dockerfile
        --tag ${var.image-full-name-internal}:${var.build-version}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.build-version}
        --build-arg JAR_FILE=eric-oss-flow-automation-${var.pom-version}.jar
        --build-arg RSTATE=${var.rstate}
        --build-arg IMAGE_PRODUCT_NUMBER=${common.fa-image-product-number}
        --target ${var.docker-image-target}
    - task: docker-build-db
      cmd: docker build ${env.PWD}
        --file flowautomation-service-db/Dockerfile
        --tag ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:${var.build-version}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.build-version}
        --build-arg RSTATE=${var.rstate}
        --build-arg IMAGE_PRODUCT_NUMBER=${common.fa-db-image-product-number}
    - task: docker-build-bragent
      cmd: docker build ${env.PWD}
        --file flowautomation-service-bragent/Dockerfile
        --tag ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-bragent:${var.build-version}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.build-version}
        --build-arg RSTATE=${var.rstate}
        --build-arg IMAGE_PRODUCT_NUMBER=${common.fa-bragent-image-product-number}


  # Delete docker images created
  delete-images:
    - task: delete-internal-image
      cmd: docker image remove ${var.image-full-name-internal}:${var.build-version} || true
    - task: delete-drop-image
      cmd: docker image remove ${image-full-name}:${var.build-version} || true
    - task: delete-db-image
      cmd: docker image remove ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:${var.build-version} || true
    - task: delete-db-dev-image
      cmd: docker image remove ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db-dev:${var.build-version} || true
    - task: delete-bragent-image
      cmd: docker image remove ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-bragent:${var.build-version} || true
    - task: delete-internal-dev-image
      cmd: docker image remove ${var.image-full-name-internal}-dev:${var.build-version} || true
    - task: delete-internal-db-dev-image
      cmd: docker image remove ${var.image-full-name-internal-db}-dev:${var.build-version} || true

  # Check for image design rule compliance
  image-dr-check:
    - task: check-image-dr
      docker-image: adp-image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-full-name-internal}:${var.build-version}
          --output .bob/check-image/
          ${var.image-dr-vm-args}"
    - task: check-db-image-dr
      docker-image: adp-image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:${var.build-version}
          --output .bob/check-db-image/
          ${var.image-dr-vm-args}"
    - task: check-bragent-image-dr
      docker-image: adp-image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-bragent:${var.build-version}
          --output .bob/check-db-image/
          ${var.image-dr-vm-args}"

  # Push image to ci-internal repo and create local version of helm chart
  package-local:
    - task: fa-image-push-internal
      cmd: docker push ${var.image-full-name-internal}:${var.build-version}
    - task: db-image-push-internal
      cmd: docker push ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:${var.build-version}
    - task: bragent-image-push-internal
      cmd: docker push ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-bragent:${var.build-version}
    - task: image-tag-internal-fa-latest
      cmd: docker tag ${var.image-full-name-internal}:${var.build-version} ${var.image-full-name-internal}:latest
    - task: image-tag-internal-fa-db-latest
      cmd: docker tag ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:${var.build-version} ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:latest
    - task: image-tag-internal-fa-bragent-latest
      cmd: docker tag ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-bragent:${var.build-version} ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-bragent:latest
    - task: fa-image-push-internal-latest
      cmd: docker push ${var.image-full-name-internal}:latest
    - task: db-image-push-internal-latest
      cmd: docker push ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-db:latest
    - task: bragent-image-push-internal-latest
      cmd: docker push ${var.image-registry}/${var.image-repopath-internal}/eric-oss-flow-automation-bragent:latest
    - task: package-helm-internal
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output .bob/${common.helm-chart-name}-internal
        --version ${var.build-version}
        --replace eric-product-info.yaml:IMAGE_VERSION=${var.build-version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-internal}
        --replace eric-product-info.yaml:IMAGE_NAME=${common.docker-image-name}
        --replace eric-product-info.yaml:FA_IMAGE_PRODUCT_NUMBER=${common.fa-image-product-number}
        --replace eric-product-info.yaml:FA_DB_IMAGE_PRODUCT_NUMBER=${common.fa-db-image-product-number}
        --replace eric-product-info.yaml:FA_BRAGENT_IMAGE_PRODUCT_NUMBER=${common.fa-bragent-image-product-number}

  upload-cpi-fragment:
    - task: validate-license-agreement
      docker-image: adp-release-auto
      cmd: license-agreement validate
        --license-agreement ${common.license-agreement-file-path}
    - task: upload-license-agreement-json
      docker-image: adp-release-auto
      cmd: upload_file.sh
        -f ${common.license-agreement-file-path}
        -r "${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/documents"
        -t "${env.SELI_ARTIFACTORY_REPO_PASS}"
        -o true
    - task: validate-service-ports-json
      docker-image: adp-release-auto
      cmd: service-ports validate
        -f ${common.service-ports-file-path}
    - task: upload-service-ports-json
      docker-image: adp-release-auto
      cmd: upload_file.sh
        -f "${common.service-ports-file-path}"
        -c "${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/documents/${common.service-ports-file-name}"
        -t "${env.SELI_ARTIFACTORY_REPO_PASS}"
        -o true

  structure-data-generate:
    - task: create-report-dir
      cmd: mkdir -p ${common.structure-output-dir}
    - task: structure-data-generate
      docker-image: adp-release-auto
      cmd: structure-data generate
        --service-name ${common.helm-chart-name}
        --apr-product ${common.service-product-number}
        --foss-license-agreement "${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/documents/${common.license-agreement-file-name}"
        --service_ports "${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/documents/${common.service-ports-file-name}"
        --output ${common.structure-output-dir}

  structure-data-validate:
    - task: structure-data-validate
      docker-image: adp-release-auto
      cmd: structure-data validate
        --file "${common.structure-output-dir}${structure-data-file}"

  structure-data-upload:
    - task: structure-data-upload
      docker-image: adp-release-auto
      cmd: structure-data upload
        --file ${common.structure-output-dir}${structure-data-file}
        --url "${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/documents/"
        --token ${env.SELI_ARTIFACTORY_REPO_PASS}

  # Push image to ci-internal repo, create internal version of helm chart and pushes it to internal repo
  package:
    - rule: package-local
    - task: helm-upload-internal
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=.bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.build-version}.tgz
        --repository=${var.helm-chart-repo-internal}/${common.helm-chart-name}
        --properties=product-metadata="${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/documents/${structure-data-file}"
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}

  k8s-test:
    - rule: find-docker-config-basepath
    - rule: helm-dry-run
    - rule: create-namespace
    - rule: helm-install
    - rule: healthcheck
    - rule: helm-test
    - rule: kaas-info
    - rule: delete-namespace

  find-docker-config-basepath:
    - task: find-docker-config-basepath
      cmd: dirname $HOME/.docker/config.json > .bob/var.docker-config-basepath

  helm-dry-run:
    - rule: find-docker-config-basepath
    - task: helm-dry-run
      docker-image: adp-helm-kubectl
      docker-flags: &docker_flags_kube_config
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${env.K8S_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env ENABLE_HELM_V3"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--env HELM_VERSION=${env.HELM_VERSION_IN_IMAGE}"
        - "--volume ${env.PWD}:${env.PWD}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
        - "--volume ${var.docker-config-basepath}:${var.docker-config-basepath}"
      cmd: helm install .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.build-version}.tgz
        --dry-run
        --debug
        --generate-name > helm-install-dry-run.log

  create-namespace:
    - rule: find-docker-config-basepath
    - task: delete-namespace-if-exists
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${env.K8S_NAMESPACE} || true
    - task: create-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8S_NAMESPACE}

  helm-install-or-upgrade-postgres:
    - rule: find-docker-config-basepath
    - task: create-postgres-secret
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic ${image-secret}
        --from-file=.dockerconfigjson=$HOME/.docker/config.json
        --type=kubernetes.io/dockerconfigjson
        --namespace ${env.K8S_NAMESPACE} || true
    - task: helm-dependency-update
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - helm --debug repo add ${common.helm-chart-name} ${helm-chart-drop-repo} --username ${env.SELI_ARTIFACTORY_REPO_USER} --password ${env.SELI_ARTIFACTORY_REPO_PASS}
        - helm --debug repo update ${common.helm-chart-name} https://arm.sero.gic.ericsson.se/artifactory/proj-adp-gs-all-helm
        - helm --debug dependency update ${env.POSTGRES_HELM_CHART} --skip-refresh
    - task: helm-install-or-upgrade-database-pg
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm --debug upgrade
        --install ${env.POSTGRES_HELM_RELEASE_NAME} ${env.POSTGRES_HELM_CHART}
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --set global.pullSecret=${image-secret}
        --timeout ${env.HELM_INSTALL_TIMEOUT}

  helm-install:
    - task: helm-install-or-upgrade
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm --debug upgrade
        --install ${env.HELM_RELEASE} .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.build-version}.tgz
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --set global.security.tls.enabled=false
        --set global.pullSecret=${image-secret}
        --wait

  helm-install-kgb:
    - task: prepare-helm-repo
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - helm --debug repo add ${common.helm-chart-name} ${helm-chart-drop-repo} --username ${env.SELI_ARTIFACTORY_REPO_USER} --password ${env.SELI_ARTIFACTORY_REPO_PASS}
        - helm --debug repo update
    - task: install-kgb-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm --debug upgrade
        --install ${env.HELM_RELEASE} ${common.helm-chart-name}/${common.helm-chart-name}
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --set global.pullSecret=${image-secret}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait
        --devel
    - rule: healthcheck

  helm-upgrade:
    - rule: helm-install-kgb
    - rule: helm-install

  healthcheck:
    - rule: find-docker-config-basepath
    - task: healthcheck
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: ./healthcheck.sh

  helm-test:
    - rule: find-docker-config-basepath
    - task: install-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm test ${env.HELM_RELEASE}
        --namespace ${env.K8S_NAMESPACE}
        --timeout ${env.HELM_TEST_TIMEOUT}

  kaas-info:
    - task: get-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' > .bob/var.kaas-version
        - kubectl config current-context > .bob/var.kaas-current-context
    - task: output-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - echo -e '# KaaS Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# CCD Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.erikube/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# KaaS Release Information:' >> ${env.KAAS_INFO_FILE}
        - echo -e "Ericsson Web Services - https://ews.rnd.gic.ericsson.se/cd.php?cluster=${var.kaas-current-context}" >> ${env.KAAS_INFO_FILE}
        - echo -e "KaaS release information - https://confluence.lmera.ericsson.se/display/AD/${var.kaas-version}" >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Version:' >> ${env.KAAS_INFO_FILE}
        - kubectl version >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Cluster Info:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl cluster-info | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Config Context:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl config get-contexts >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Helm Version:' >> ${env.KAAS_INFO_FILE}
        - helm version >> ${env.KAAS_INFO_FILE}

  delete-namespace:
    - rule: find-docker-config-basepath
    - task: delete-release
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm delete ${env.HELM_RELEASE} --namespace ${env.K8S_NAMESPACE} || true
    - task: delete-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${env.K8S_NAMESPACE} || true

  # Publish docker images and helm charts to drop repository
  # Call publish only when merged to master
  publish:
    - task: package-helm-release
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output build
        --version ${var.release-version}
        --replace eric-product-info.yaml:IMAGE_VERSION=${var.build-version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-drop}
        --replace eric-product-info.yaml:IMAGE_NAME=${common.docker-image-name}
        --replace eric-product-info.yaml:FA_IMAGE_PRODUCT_NUMBER=${common.fa-image-product-number}
        --replace eric-product-info.yaml:FA_DB_IMAGE_PRODUCT_NUMBER=${common.fa-db-image-product-number}
        --replace eric-product-info.yaml:FA_BRAGENT_IMAGE_PRODUCT_NUMBER=${common.fa-bragent-image-product-number}
    - task: image-pull-internal-fa
      cmd: docker pull ${var.image-full-name-internal}:${var.build-version}
    - task: image-pull-internal-fa-db
      cmd: docker pull ${var.image-full-name-internal-db}:${var.build-version}
    - task: image-pull-internal-fa-bragent
      cmd: docker pull ${var.image-full-name-internal-bragent}:${var.build-version}
    - task: image-tag-public-fa
      cmd: docker tag ${var.image-full-name-internal}:${var.build-version} ${image-full-name}:${var.build-version}
    - task: image-tag-public-fa-db
      cmd: docker tag ${var.image-full-name-internal-db}:${var.build-version} ${image-full-name-db}:${var.build-version}
    - task: image-tag-public-fa-bragent
      cmd: docker tag ${var.image-full-name-internal-bragent}:${var.build-version} ${image-full-name-bragent}:${var.build-version}
    - task: image-tag-public-fa-latest
      cmd: docker tag ${var.image-full-name-internal}:${var.build-version} ${image-full-name}:latest
    - task: image-tag-public-fa-db-latest
      cmd: docker tag ${var.image-full-name-internal-db}:${var.build-version} ${image-full-name-db}:latest
    - task: image-tag-public-fa-bragent-latest
      cmd: docker tag ${var.image-full-name-internal-bragent}:${var.build-version} ${image-full-name-bragent}:latest
    - task: image-push-public-fa
      cmd: docker push ${image-full-name}:${var.build-version}
    - task: image-push-public-fa-db
      cmd: docker push ${image-full-name-db}:${var.build-version}
    - task: image-push-public-bragent-db
      cmd: docker push ${image-full-name-bragent}:${var.build-version}
    - task: image-push-public-fa-latest
      cmd: docker push ${image-full-name}:latest
    - task: image-push-public-fa-db-latest
      cmd: docker push ${image-full-name-db}:latest
    - task: image-push-public-bragent-latest
      cmd: docker push ${image-full-name-bragent}:latest
    - task: helm-upload
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=build/${common.helm-chart-name}-${var.release-version}.tgz
        --repository=${helm-chart-drop-repo}/${common.helm-chart-name}
        --properties=product-metadata="${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/documents/${structure-data-file}"
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}
    - rule: publish-oas
    - rule: publish-jars

  # Publish OpenAPI specs to Generic drop repository
  publish-oas:
    - task: upload-open-api-specs
      docker-image: adp-helm-kubectl
      docker-flags:
        - "--env OPEN_API_SPEC_DIRECTORY=${env.OPEN_API_SPEC_DIRECTORY}"
      cmd:
        bash -c 'for oas in ${env.OPEN_API_SPEC_DIRECTORY}/*openapi.yaml; do
          if [ -f $oas ]; then
            curl -X PUT -T $oas ${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}/$(basename -- $oas) -u ${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS};
          fi
        done'

  publish-md-oas:
   - task: zipping-md-oas
     docker-image: adp-release-auto
     cmd: 'doc-handler generate --config config/marketplace_config.yaml
                                --output ./build/doc-md
                                --format md
                                --zip'
   - task: upload-md-oas
     docker-image: adp-release-auto
     cmd: "marketplace upload --arm-api-token=${env.SELI_ARTIFACTORY_REPO_PASS}
       --arm-url=${generic-drop-repo}-local/${common.helm-chart-name}/${var.build-version}
       --config=config/marketplace_upload_config.yaml
       --version=${var.version-prefix}"

  publish-jars:
    - task: mvn-upload
      docker-image: adp-maven-builder
      docker-flags:
        - ${env.DOCKER_VOLUME_MAPPING_PASSWD}
        - "--volume /etc/ssh:/etc/ssh"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--env SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}"
        - "--env SELI_ARTIFACTORY_REPO_PASS=\"${env.SELI_ARTIFACTORY_REPO_PASS}\""
        - "--env MAVEN_OPTS"
      cmd:
        - git checkout master
        - mvn ${env.MAVEN_CLI_OPTS} -Darguments=" -Dmaven.install.skip=true -Dmaven.javadoc.skip=true" deploy -DskipTests

  helm-chart-check-report-warnings:
    - task: helm-chart-check-report-warnings
      cmd:
        - if grep -q ">WARNING<" .bob/design-rule-check-report.xml; then
            echo true > .bob/var.helm-chart-check-report-warnings;
          else
            echo true > .bob/var.helm-chart-check-report-warnings;
          fi

  collect-k8s-logs:
    - task: collect-logs-using-script
      docker-image: adp-helm-kubectl
      docker-flags:
        - "--env ENABLE_HELM_V3"
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${env.K8S_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env SERO_ARTIFACTORY_REPO_USER=${env.SERO_ARTIFACTORY_REPO_USER}"
        - "--env SERO_ARTIFACTORY_REPO_PASS=\"${env.SERO_ARTIFACTORY_REPO_PASS}\""
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--env COLLECT_LOGS_SCRIPT_FILE_NAME"
        - "--env COLLECT_LOGS_SINCE_RELATIVE_TIME"
        - "--env COLLECT_LOGS_DIR"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
      cmd:
        - mkdir -p ${env.COLLECT_LOGS_DIR}
        - kubectl config view > ${env.COLLECT_LOGS_DIR}/kubectl.config
        - kubectl get ns > ${env.COLLECT_LOGS_DIR}/kubectl-get-ns.log
        - helm ls -Aa > ${env.COLLECT_LOGS_DIR}/helm-ls-Aa.log
        - printenv | grep -v CREDENTIALS | grep -v ARTIFACTORY > ${env.COLLECT_LOGS_DIR}/printenv.log
        - curl -u ${env.SERO_ARTIFACTORY_REPO_USER}:${env.SERO_ARTIFACTORY_REPO_PASS} ${env.COLLECT_LOGS_SCRIPT_LOCATION}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME} > ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - chmod 777 ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - sh -c "cd ${env.COLLECT_LOGS_DIR} && ./${env.COLLECT_LOGS_SCRIPT_FILE_NAME} ${env.K8S_NAMESPACE} ${env.COLLECT_LOGS_SINCE_RELATIVE_TIME}"

  # fossa init stage
  fossa-init:
    - task: commit
      docker-image: adp-release-auto
      cmd: git rev-parse --short HEAD > .bob/var.commithash
    - task: fossa-init
      docker-image: adp-maven-builder
      docker-flags:
        - ${docker-params}
      cmd:
        fossa init --endpoint ${fossa-server-endpoint} --project ${fossa-project-name}

  # fossa analyze stage
  fossa-analyze:
    - task: fossa-analyze
      docker-image: adp-maven-builder
      docker-flags:
        - ${docker-params}
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd:
        fossa analyze --revision ${var.build-version} --team ${fossa-team-name} --endpoint ${fossa-server-endpoint} --project ${fossa-project-name}

  # fossa scan status stage
  fossa-scan-status-check:
    - task: fossa-scan-status-check
      docker-image: adp-release-auto
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa_scan_status_check -s ${fossa-server-endpoint} -f custom -p ${fossa-project-name} -r ${var.build-version} -t ${env.FOSSA_API_KEY} -dl 15


  # New attribution format
  fetch-fossa-report-attribution:
    - task: fetch-fossa-report-attribution
      docker-image: adp-maven-builder
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa report attribution
        --endpoint ${fossa-server-endpoint}
        --project ${fossa-project-name}
        --revision ${var.build-version} --json > ${fossa-report-name}

  # Old dependencies format (DEPRECIATED Old way of generating dependencies.yaml)
  # See https://eteamspace.internal.ericsson.com/display/STETFS/Setting+up+and+running+a+FOSSA+scan
  fetch-fossa-report-dependencies:
    - task: fetch-fossa-report-dependencies
      docker-image: adp-maven-builder
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa report dependencies
        --config ${fossa-config-location}
        --endpoint ${fossa-server-endpoint}
        --project-url ${fossa-project-name}
        --revision ${var.commithash} --json > dependencies_${fossa-report-name}

  # This script will check in Bazaar for 3PP that are registered and listed in ${dependency-file-name}
  dependency-update:
    - task: dependency-update
      docker-image: adp-release-auto
      cmd: dependencies update
        --fossa-report ${fossa-report-name}
        --dependencies ${dependency-file-name}

  # Scan the Bazaar to get more information about the dependencies
  scan-bazaar:
    - task: scan-bazaar
      docker-image: adp-release-auto
      cmd: dependencies update
        --fossa-report ${fossa-report-name}
        --dependencies ${dependency-file-name}
        --scan-bazaar
        --bazaar-user ${env.BAZAAR_USER}
        --bazaar-token ${env.BAZAAR_TOKEN}
        --link-dependencies
        --sort

  # Lint the helm chart and run the helm design rules checker
  dependency-validate:
    - task: dependency-validate
      docker-image: adp-release-auto
      cmd: dependencies validate
        --dependencies ${dependency-file-name}
        --allow-esw4

  # fossa related artifact (fossa.report.json and dependancy.yaml)
  fossa-scan-artifact-upload:
    - task: fossa-scan-artifact-upload
      docker-image: adp-release-auto
      cmd:
        bash -c 'tar czf ${fossa-scan-artifact-file-name} ${dependency-file-name} ${fossa-report-name};
        curl -u '${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS}' -X PUT -T ${fossa-scan-artifact-file-name} ${fossa-scan-report-artifact-path}/${fossa-scan-artifact-file-name}'

  hadolint-scan:
    - task: hadolint-scan-test
      docker-image: hadolint-scan
      docker-flags:
        - "--workdir /app/"
        - "-v ${env.PWD}/config/hadolint_config.yaml:/config/hadolint_config.yaml"
        - "-v ${env.PWD}/Dockerfile:/Dockerfile"
        - "-v ${env.PWD}/build/hadolint-scan:/tmp/reports/"
      cmd: "-p ${common.helm-chart-name} -f /Dockerfile -c /config/hadolint_config.yaml; echo $? > .bob/var.resultcode_hadolint_check"

  evaluate-design-rule-check-resultcodes:
    - task: hadolint-result-check
      cmd: sh -c '
        if [ ${var.resultcode_hadolint_check} -ne 0 ]; then
        echo "Failure in hadolint checker";
        exit ${var.resultcode_hadolint_check};
        fi ;'

  kubehunter-scan:
    - task: get-config
      cmd: cp -v .kube/config  ${env.PWD}/config/config
    - task: kubehunter-scan-test
      docker-image: va-scan-kubehunter
      docker-flags:
        - "--workdir /opt/kubehunter/"
        - ${env.DOCKER_VOLUME_MAPPING_PASSWD}
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
        - "-v ${env.PWD}/config:/opt/kubehunter/conf"
        - "-v ${env.PWD}/build/kubehunter-report/:/tmp/reports"
      cmd: " "

  # Run kubeaudit
  kube-audit:
    - task: helm-template
      docker-image: adp-release-auto
      cmd: "helm template charts/${common.helm-chart-name} --output-dir=.bob/helm_src"
    - task: kube-audit-test
      docker-image: va-scan-kubeaudit
      docker-flags:
        - "--workdir /opt/va-scan-kubeaudit/"
        - "-v ${env.PWD}/config:/opt/va-scan-kubeaudit/conf"
        - "-v ${env.PWD}/build/kube-audit-report/:/tmp/reports"
        - "-v ${env.PWD}/.bob/helm_src:/tmp/src"
      cmd: " "

  # Run kubesec scanning
  kubesec-scan:
    - task: helm-template
      docker-image: va-scan-kubesec
      cmd: "helm template charts/${common.helm-chart-name} --output-dir=.bob/helm_kubesec"
    - task: remove-files-not-for-scanning
      cmd:
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/tests
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/hpa.yaml
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/rolebinding.yaml
    - task: kubesec-scan-test
      docker-image: va-scan-kubesec
      docker-flags:
        - "--workdir /opt/va-scan-kubesec/"
        - "-v ${env.PWD}/config:/opt/va-scan-kubesec/conf"
        - "-v ${env.PWD}/build/kubesec-reports/:/tmp/reports"
        - "-v ${env.PWD}/.bob/helm_kubesec/:/tmp/src"
      cmd: " "

  fetch-xray-report:
    - task: fetch-xray-report
      docker-image: adp-release-auto
      cmd: bash -c 'fetch-xray
        --config ${env.PWD}/config/xray_report.config
        --debug
        --user ${env.XRAY_USER}
        --apikey ${env.XRAY_APIKEY}
        --output ${env.PWD}/build/xray-reports/xray_report.json
        --set artifactory-subpath=${project-subpath}
        --set image=${common.docker-image-name}
        --set version=${var.build-version}
        --raw-output ${env.PWD}/build/xray-reports/raw_xray_report.json'

  trivy-inline-scan:
    - task: fetch-image
      cmd:
        - "docker pull ${image-to-scan}"
        - mkdir -p build/trivy-reports
    - task: trivy-inline-scan-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --offline-scan --timeout 30m ${image-to-scan}
    - task: trivy-inline-scan-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --format json --output build/trivy-reports/trivy.report.json --offline-scan --timeout 30m ${image-to-scan}

  anchore-grype-scan:
    - task: fetch-image
      cmd: "docker pull ${image-to-scan}"
    - task: anchore-grype-scan
      docker-image: grype-scan
      docker-in-docker: socket
      cmd: grype_scan
        --image ${image-to-scan}
        --report-dir build/anchore-reports

  cleanup-anchore-trivy-images:
    - task: clean-images
      cmd:
        - "docker image rm -f ${anchore-grype-image}"
        - "docker image rm -f ${trivy-image}"
        - "docker image rm -f ${image-to-scan}"

  # Fetch vulnerabililty report VA 2.0
  generate-VA-report-V2:
    - task: no-upload
      docker-image: adp-release-auto
      docker-flags:
        - --env VHUB_API_TOKEN
      cmd: bash -c 'va-report
        --set version=${var.build-version}
        --config ${env.PWD}/config/va-report.config
        --output ${env.PWD}/build/Vulnerability_Report_2.0.md
        --md
        --debug
        --anchore-reports ${env.PWD}/build/anchore-reports
        --trivy-reports ${env.PWD}/build/trivy-reports
        --xray-report ${env.PWD}/build/xray-reports/xray_report.json
        --raw-xray-report ${env.PWD}/build/xray-reports/raw_xray_report.json
        --kubeaudit-reports ${env.PWD}/build/kube-audit-report/${common.helm-chart-name}/templates/deployment
        --kubesec-reports ${env.PWD}/build/kubesec-reports'; exit 0;
    - task: upload
      docker-image: adp-release-auto
      docker-flags:
        - --env VHUB_API_TOKEN
      cmd: bash -c 'va-report
        --set version=${var.build-version}
        --config ${env.PWD}/config/va-report.config
        --output ${env.PWD}/build/Vulnerability_Report_2.0.md
        --md
        --debug
        --anchore-reports ${env.PWD}/build/anchore-reports
        --trivy-reports ${env.PWD}/build/trivy-reports
        --xray-report ${env.PWD}/build/xray-reports/xray_report.json
        --raw-xray-report ${env.PWD}/build/xray-reports/raw_xray_report.json
        --kubeaudit-reports ${env.PWD}/build/kube-audit-report/${common.helm-chart-name}/templates/deployment
        --kubesec-reports ${env.PWD}/build/kubesec-reports
        --upload-scan-results'; exit 0;

  # Create and push git tag. Example v1.0.0-55
  create-git-tag:
    - task: git-tag
      docker-image: adp-release-auto
      docker-flags:
        - --env GERRIT_USERNAME
        - --env GERRIT_PASSWORD
      cmd: version-handler create-git-tag
        --git-repo-url ${git-repo-url}
        --tag ${var.build-version}
        --message "Release ${var.build-version}"
