/*******************************************************************************
 * COPYRIGHT Ericsson 2023
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/
package com.ericsson.oss.services.flowautomation.flow.usertasks.schema.processor;

import com.ericsson.oss.services.flowautomation.execution.event.api.FlowEventRecorderService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This class holds error messages generated by the schema processing that needs to be recorded later.
 */
public class SchemaProcessorReport {

    private static final Logger LOGGER = LoggerFactory.getLogger(SchemaProcessorReport.class);

    public static final String ERROR_MESSAGE_KEY = "message";
    public static final String ERROR_DETAILS_KEY = "details";
    private String taskName;
    private Map<String, Map<String, String>> errors;

    public SchemaProcessorReport(final String taskName) {
        this.taskName = taskName;
        this.errors = new LinkedHashMap<>();
    }

    public boolean isSuccess() {
        return this.errors.isEmpty();
    }

    /**
     * This methods saves an error message from the schema processing, so that it can be recorded later.
     * @param jsonPath Json path property where the error occurred
     * @param message Error message
     * @param details Details of the error message
     */
    public void addError(final JsonPath jsonPath, final String message, final String details) {
        Map<String, String> error = new HashMap<>();
        error.put(ERROR_MESSAGE_KEY, message);
        error.put(ERROR_DETAILS_KEY, details);
        if (jsonPath != null) {
            this.errors.put(jsonPath.toString(), error);
        } else {
            LOGGER.warn("Fail to add schema error message: {}",  message);
        }
    }

    public Map<String, Map<String, String>> getErrors() {
        return this.errors;
    }

    /**
     * This method records all the error messages collected from the schema processing using the FlowEventRecorderService
     * and processInstanceBusinessKey provided.
     * @param flowEventRecorderService Recorder service to where the error message will be recorded
     * @param processInstanceBusinessKey Flow instance identifier
     */
    public void recordErrors(final FlowEventRecorderService flowEventRecorderService,
                             final String processInstanceBusinessKey) {
        errors.forEach((key, error) -> {
            String target = "User Task Schema: " + taskName;
            String message = error.get(ERROR_MESSAGE_KEY);
            String details = error.get(ERROR_DETAILS_KEY);

            if (flowEventRecorderService != null) {
                flowEventRecorderService.warn(processInstanceBusinessKey, message, target, details);
            } else {
                LOGGER.warn("FlowEventRecorderService is null, messages won't be recorded.");
            }

            String logMessage = String.format("%nRESOURCE: %s%nMESSAGE: %s%nERROR DETAILS:%n%s", target, message, details);
            LOGGER.warn(logMessage);
        });
    }
}
