/*******************************************************************************
 * COPYRIGHT Ericsson 2021
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.services.flowautomation.flows.test;

import static com.ericsson.oss.services.flowautomation.test.fwk.TestUtils.getFlowPackageBytes;
import static com.ericsson.oss.services.flowautomation.test.fwk.TestUtils.getFlowdataFileBytes;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.ericsson.oss.services.flowautomation.model.FlowDefinition;
import com.ericsson.oss.services.flowautomation.model.FlowExecution;
import com.ericsson.oss.services.flowautomation.test.fwk.FlowAutomationBaseTest;
import com.ericsson.oss.services.flowautomation.test.fwk.UsertaskCheckBuilder;
import com.ericsson.oss.services.flowautomation.test.fwk.UsertaskInputBuilder;

/**
 * Test class for back button enabled flow.
 */
@SuppressWarnings({"squid:S00100"})
public abstract class DslFlowWithBackEnabledTest extends FlowAutomationBaseTest {

    String flowPackage = "flow-with-back-enabled-1.0.0";
    String flowId = "com.ericsson.oss.fa.flows.backEnabled";
    FlowDefinition flowDefinition;

    private static final String UPLOAD_FILE = "Upload File > File";
    private static final String TXT_FILE = "file.txt";
    private static final String USER_INPUT_TEXT = "User Input > Input text";
    private static final String USER_INPUT = "User Input";
    private static final String HELLO_WORLD = "Hello World";
    private static final String SHOW_GENERATED_DATA = "Show Generated Data";
    private static final String DYNAMIC_DATA_SELECTION = "Dynamic Data Selection > Selection";
    @Before
    public void before() {
        flowDefinition = importFlow(flowId, getFlowPackageBytes(flowPackage));
    }

    @After
    public void after() {
        removeFlow(flowId);
    }

    @Test
    @SuppressWarnings("squid:S1126")
    public void testEndToEndFlowExecution() {

        String executionName = createUniqueInstanceName(flowId);

        FlowExecution flowExecution = startFlowExecution(flowDefinition, executionName);

        completeUsertaskChooseSetupInteractive(flowExecution);

        checkUsertask(flowExecution, "Information", new UsertaskCheckBuilder()
                .check("This flow allows going back in the setup phase."));

        //Go forward
        completeUsertaskNoInput(flowExecution, "Information");

        //Go forward with upload file
        completeUsertask(flowExecution, "File Upload", new UsertaskInputBuilder().
                input(UPLOAD_FILE, TXT_FILE, getFlowdataFileBytes(flowPackage, TXT_FILE)));

        //Go Back
        backUsertask(flowExecution);

        //Go forward without uploading file again
        completeUsertask(flowExecution, "File Upload", new UsertaskInputBuilder().
                input(UPLOAD_FILE, TXT_FILE));

        //Go forward
        completeUsertask(flowExecution, SHOW_GENERATED_DATA, new UsertaskInputBuilder().
                input(DYNAMIC_DATA_SELECTION, "1"));

        //Go Back goBackUsertask
        backUsertask(flowExecution);

        //Check the previously submitted data is binding in usertask as default
        checkUsertask(flowExecution, SHOW_GENERATED_DATA, new UsertaskCheckBuilder().
                check(DYNAMIC_DATA_SELECTION, "1"));

        //Go forward
        // Completing with new data generated by script configured in back target.
        completeUsertask(flowExecution, SHOW_GENERATED_DATA, new UsertaskInputBuilder().
                input(DYNAMIC_DATA_SELECTION, "2"));

        //Go forward
        completeUsertask(flowExecution, USER_INPUT, new UsertaskInputBuilder().
                input(USER_INPUT_TEXT, HELLO_WORLD));

        // Check Review and Confirm
        checkUsertaskReviewAndConfirm(flowExecution, new UsertaskCheckBuilder().
                check(UPLOAD_FILE, TXT_FILE).
                check(DYNAMIC_DATA_SELECTION, "2").
                check(USER_INPUT_TEXT, HELLO_WORLD));

        //Go Back from review and confirm.
        backUsertask(flowExecution);

        //Check the previously submitted data is binding in usertask as default
        checkUsertask(flowExecution, USER_INPUT, new UsertaskCheckBuilder().
                check(USER_INPUT_TEXT, HELLO_WORLD));

        //Go forward
        // Completing with new data for the user input usertask
        completeUsertask(flowExecution, USER_INPUT, new UsertaskInputBuilder().
                input(USER_INPUT_TEXT, "Flow Automation supports back button in setup phase."));

        // Check Review and Confirm
        checkUsertaskReviewAndConfirm(flowExecution, new UsertaskCheckBuilder().
                check(UPLOAD_FILE, TXT_FILE).
                check(DYNAMIC_DATA_SELECTION, "2").
                check(USER_INPUT_TEXT, "Flow Automation supports back button in setup phase."));

        completeUsertaskReviewAndConfirm(flowExecution);

        checkExecutionExecuted(flowExecution);
    }
}
